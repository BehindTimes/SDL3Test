#pragma once

#include <SDL3/SDL.h>

class UltimaSpellCombat
{
public:
	UltimaSpellCombat();
	void Incap();
	unsigned char GetXYDng(short x, short y);
	void PutXYDng(unsigned char value, short x, short y);
	void ShowHit(short x, short y, unsigned char hitType, unsigned char tileUnder);
	void Poison(short chnum);
	void Missed();
	void Pilfer(short chnum);
	unsigned char DetermineShape(short type);
	unsigned char CombatCharacterHere(short x, short y);
	unsigned char CombatMonsterHere(short x, short y);
	unsigned char ExodusCastle() const;
	void Spell(short chnum, short spellnum);
	void Combat();
	void drawCombat();
	void combatstart();
	bool HandleDefaultKeyPress(SDL_Keycode key);
	bool FinishCombatTurn();
	void HandleMonsterMove();
	void updateGameTime(Uint64 deltaTime);
	void AutoCombat(short chnum);
	bool FutureMonsterHere(short x, short y) const;
	bool c8777Callback();
	void poisonDeath(unsigned char player);

	unsigned char m_g5521;
	unsigned char m_g835D;
	unsigned char m_g835F;
	bool m_newMove;
	bool m_combatStart;
	unsigned char m_count;
	unsigned char m_count2;
	unsigned char m_activePlayer;
	short m_mon;
	bool m_monster_turn;
	short m_gChnum;
	bool m_cHide;
	Uint64 m_elapsedFlashTime;
	bool m_updateBlink;
	int m_spellnum;
private:
	void Failed();
	bool ShowHitCallback() const;
	void BigDeath(short damage, short chnum);
	void Flashriek();
	bool BigDeathCallback();
	bool BigDeathCallback1();
	bool BigDeathCallback2();
	bool BigDeathCallback3();
	void DamageMonster(short which, short damage, short chnum);
	void AddExp(short chnum, short amount);
	short BackGround(short montype);
	unsigned char HowMany() const;
	void PrintMonster(short which, bool plural, char variant);
	void GetScreen(short resid);
	void LetterCommand(SDL_Keycode key);
	void HandleMove();
	bool CommandHandleMove();
	unsigned char ValidMove(short value);
	void FinishCombatMonsterTurn();
	short FigureNewMonPosition(short mon);
	unsigned char CombatValidMove(short value);
	void afternext();
	void monshoot() const;
	void monshoot2();
	void monlb();
	void monmagic();
	void nextplr();
	void plrhit();
	void c8777();
	bool HandleMonsterMoveCallback();
	bool monmagicCallback();
	bool monshootCallback();
	bool CombatAttack();
	bool CombatAttackCallback();
	bool CombatAttackCallback1();
	bool CombatAttackCallback2();
	bool Shoot();
	bool ShootCallback();
	bool ShootCallback1();
	void Victory() const;
	void Projectile(short chnum, short damage);
	bool ProjectileCallback();
	bool ProjectileCallback1();
	bool ProjectileCallback2();
	void DownLevel();
	bool DownLevelCallback();
	void RelocateDungeon();
	void UpLevel();
	bool UpLevelCallback();
	bool DagAcronCallback();
	bool FalDiviCallback();
	void Necorp();
	bool NecorpCallback();
	bool NecorpCallback1();
	bool NecorpCallback2();
	bool NecorpCallback3();
	bool ApparUnemCallback();
	void Heal(short damage);
	bool HealCallback();
	bool HealCallback1() const;
	bool LibRekCallback();
	void Alcort();
	bool AlcortCallback();
	bool AlcortCallback1();
	bool SequituCallback();
	void Surmandum();
	bool SurmandumCallback();
	bool SurmandumCallback1();
	void AnjuSermani();
	bool AnjuSermaniCallback();
	bool AnjuSermaniCallback1();
	void Armageddon();
	bool ArmageddonCallback();
	void Terramorph();
	bool TerramorphCallback();
	bool TerramorphCallback2();
	bool TerramorphCallback3();
	void Flotellum();
	bool FlotellumCallback() const;
	bool NearlyDead(short who);
	bool MonsterCanAttack(short x, short y);
	bool CombatCharHere(short x, short y);
	short ThreatValue();
	void SetupNow();
	bool CombatCallback();
	bool VictoryCallback() const;
	unsigned int MonsterLinedUp(short chnum, short x, short y);
	unsigned int AutoMoveChar(short chnum, short deltaX, short deltaY);
	unsigned int doKeyNow(short deltaX, short deltaY);
	unsigned int LineUpToMonster(short chnum);
	void SetupFuture();
	unsigned int DirToNearestMonster(short chnum);
	unsigned int MonsterNearby(short chnum);
	bool CombatAttackCallback3();

	static constexpr Uint64 CombatBlink = 300;

	unsigned char m_hitType;
	unsigned char m_origValue;
	short m_x;
	short m_y;
	unsigned char m_g835E;
	unsigned char m_g56E7;
	short m_wpn;

	short m_chNum;
	short m_damage;
	short m_shootX;
	short m_shootY;
	short m_shootRet;
	short m_hit;

	unsigned char m_destX;
	unsigned char m_destY;
	unsigned char m_futureMonX[8];
	unsigned char m_futureMonY[8];
	
};

